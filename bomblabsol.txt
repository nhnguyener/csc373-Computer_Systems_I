[Bomb Lab]
Bomb #: 107

strings bomb:
/lib64/ld-linux-x86-64.so.2
libc.so.6
socket
fflush
strcpy
exit
sprintf
fopen
__isoc99_sscanf
connect
signal
puts
stdin
strtol
fgets
__errno_location
read
stdout
memcpy
strcasecmp
__ctype_b_loc
getenv
stderr
alarm
gethostbyname
gethostname
bcopy
close
fprintf
sleep
__libc_start_main
write
__gmon_start__
GLIBC_2.3
GLIBC_2.7
GLIBC_2.14
GLIBC_2.2.5
5"5
%$5
%"5
%z4
%r4
%j4
%b4
%Z4
%R4
%J4
%B3
=1:
AUATUSH
l$0A
t$0H
X[]A\A]
ATUSH
t$:E
[]A\
***truncH
ated***
AWAVAUATUSH
D$/A
H;D$
8[]A\A]A^A_
AWAVAUATUSH
Error: CI
lient unI
able to I
create sI
F ockefA
Error: DI
NS is unI
able to I
resolve I
server aI
F(ddrefA
F,ssA
Error: UI
nable toI
 connectI
 to the I
F servfA
F$erA
Error: RI
esult stI
ring tooI
 large. I
IncreaseI
 SUBMITRI
_MAXBUF
<_v
Error: CI
lient unI
able to I
write toI
 the serI
F(ver
Error: CI
lient unI
able to I
read firI
st headeI
r from sI
F0ervefA
D$0H
Error: CI
lient unI
able to I
read heaI
ders froI
m serverI
Error: CI
lient unI
able to I
read staI
tus messI
age fromI
 server
Error: RI
esult stI
ring conI
tains anI
 illegalI
 or unprI
intable I
characteI
F8fA
F@r.A
[]A\A]A^A_
Error: CH
lient unH
able to H
create sH
E ockef
Error: DH
NS is unH
able to H
resolve H
server aH
E(ddref
E,ss
[]A\A]A^A_
%s: Error: Couldn't open %s
Usage: %s [<input_file>]
That's number 2.  Keep going!
Halfway there!
Good work!  On to the next...
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
So you got that one.  Try this one.
Border relations with Canada have never been better.
Wow! You've defused the secret stage!
devils
maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?
Initialization error: Running on an illegal host [1]
Initialization error: Running on an illegal host [2]
ERROR: Input string is too large.
Your instructor has been notified.
Curses, you've found the secret phase!
But finding it and solving it are quite different...
Congratulations! You've defused the bomb!
Your instructor has been notified and will verify your solution.
Well...
OK. :-)
Invalid phase%s
Initialization error:
defused
exploded
%d:%s:%d:%s
BOOM!!!
The bomb has blown up.
%d %d %d %d %d %d
Error: Premature EOF on stdin
GRADE_BOMB
Error: Input line too long
%d %d %s
DrEvil
marrero373
Program timed out after %d seconds
Error: HTTP request failed with error %d: %s
GET /%s/submitr.pl/?userid=%s&userpwd=%s&lab=%s&result=%s&submit=submit HTTP/1.0
marrero373.cstcis.cti.depaul.edu
Error: Unable to connect to server %s
%%%02X
%s %d %[a-zA-z ]
AUTORESULT_STRING=%s
spring1920
csapp
;*3$"
dH4AprFE5h8XIDNjQadB
nnguyen
GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-28)
/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include
/usr/include/bits
/usr/include
bomb.c
stddef.h
types.h
stdio.h
libio.h
stdlib.h
phases.h
support.h
<built-in>
printf
__off_t
_IO_read_ptr
_chain
size_t
_shortbuf
_IO_buf_base
long long unsigned int
read_line
long long int
phase_defused
/home/wmarrero/labs/bomblab/src
_fileno
_IO_read_end
_flags
_IO_buf_end
_cur_column
_old_offset
infile
initialize_bomb
_IO_marker
stdin
_IO_write_ptr
_sbuf
short unsigned int
_IO_save_base
_lock
_flags2
_mode
__builtin_puts
stdout
sizetype
_IO_write_end
_IO_lock_t
_IO_FILE
fopen
_pos
_markers
unsigned char
short int
_vtable_offset
exit
bomb.c
input
_next
__off64_t
_IO_read_base
_IO_save_end
__pad1
__pad2
__pad3
__pad4
__pad5
_unused2
GNU C 4.8.5 20150623 (Red Hat 4.8.5-28) -mtune=generic -march=x86-64 -ggdb -O1
argv
phase_1
phase_2
phase_3
phase_4
phase_5
phase_6
_IO_backup_base
argc
main
_IO_write_base
crtstuff.c
__JCR_LIST__
deregister_tm_clones
__do_global_dtors_aux
completed.6355
__do_global_dtors_aux_fini_array_entry
frame_dummy
__frame_dummy_init_array_entry
bomb.c
phases.c
array.3161
support.c
sig_handler
driverlib.c
rio_readlineb
__FRAME_END__
__JCR_END__
__init_array_end
_DYNAMIC
__init_array_start
__GNU_EH_FRAME_HDR
_GLOBAL_OFFSET_TABLE_
__libc_csu_fini
skip
getenv@@GLIBC_2.2.5
phase_defused
strcasecmp@@GLIBC_2.2.5
__errno_location@@GLIBC_2.2.5
stdout@@GLIBC_2.2.5
strcpy@@GLIBC_2.2.5
puts@@GLIBC_2.2.5
stdin@@GLIBC_2.2.5
write@@GLIBC_2.2.5
_edata
num_input_strings
phase_5
initialize_bomb_solve
blank_line
submitr
phase_3
phase_1
invalid_phase
init_driver
alarm@@GLIBC_2.2.5
close@@GLIBC_2.2.5
node3
read@@GLIBC_2.2.5
__libc_start_main@@GLIBC_2.2.5
fgets@@GLIBC_2.2.5
explode_bomb
node1
__data_start
signal@@GLIBC_2.2.5
gethostbyname@@GLIBC_2.2.5
node5
fprintf@@GLIBC_2.2.5
__gmon_start__
strtol@@GLIBC_2.2.5
fun7
__dso_handle
memcpy@@GLIBC_2.14
_IO_stdin_used
host_table
func4
string_length
__libc_csu_init
fflush@@GLIBC_2.2.5
__isoc99_sscanf@@GLIBC_2.7
secret_phase
infile
sigalrm_handler
init_timeout
__bss_start
userid
main
bcopy@@GLIBC_2.2.5
read_line
strings_not_equal
phase_4
fopen@@GLIBC_2.2.5
phase_6
scratch
driver_post
send_msg
phase_2
gethostname@@GLIBC_2.2.5
sprintf@@GLIBC_2.2.5
exit@@GLIBC_2.2.5
bomb_id
connect@@GLIBC_2.2.5
__TMC_END__
node2
node4
user_password
sleep@@GLIBC_2.2.5
node6
read_six_numbers
initialize_bomb
__ctype_b_loc@@GLIBC_2.3
stderr@@GLIBC_2.2.5
socket@@GLIBC_2.2.5
.symtab
.strtab
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.comment
.debug_aranges
.debug_info
.debug_abbrev
.debug_line
.debug_str
.debug_loc

[phase_3]
0x000000000040102b <+0>:     sub    $0x18,%rsp
0x000000000040102f <+4>:     lea    0x8(%rsp),%rcx //$rsp+8 = 2nd input
0x0000000000401034 <+9>:     lea    0xc(%rsp),%rdx //$rsp+12 = 1st input
0x0000000000401039 <+14>:    mov    $0x4027ad,%esi //ans format = %d %d
0x000000000040103e <+19>:    mov    $0x0,%eax
0x0000000000401043 <+24>:    callq  0x400c10 <__isoc99_sscanf@plt>
0x0000000000401048 <+29>:    cmp    $0x2,%eax
0x000000000040104b <+32>:    jne    0x401054 <phase_4+41> //not equal 2 = explode
0x000000000040104d <+34>:    cmpl   $0xe,0xc(%rsp) //0xe = 14; 1st input < 14
0x0000000000401052 <+39>:    jbe    0x401059 <phase_4+46> //jbe = jump condition met
0x0000000000401054 <+41>:    callq  0x401554 <explode_bomb>
0x0000000000401059 <+46>:    mov    $0xe,%edx //$edx = 14
0x000000000040105e <+51>:    mov    $0x0,%esi //$esi = 0
0x0000000000401063 <+56>:    mov    0xc(%rsp),%edi //$edi = 1st input
0x0000000000401067 <+60>:    callq  0x400ff8 <func4> 
0x000000000040106c <+65>:    cmp    $0xd,%eax //$eax from func4, 0xd = 13
0x000000000040106f <+68>:    jne    0x401078 <phase_4+77> //not 13 explode
0x0000000000401071 <+70>:    cmpl   $0xd,0x8(%rsp)
0x0000000000401076 <+75>:    je     0x40107d <phase_4+82>
0x0000000000401078 <+77>:    callq  0x401554 <explode_bomb>
0x000000000040107d <+82>:    add    $0x18,%rsp
0x0000000000401081 <+86>:    retq

[phase_6]
0x00000000004010e1 <+0>:     push   %r13
0x00000000004010e3 <+2>:     push   %r12
0x00000000004010e5 <+4>:     push   %rbp
0x00000000004010e6 <+5>:     push   %rbx
0x00000000004010e7 <+6>:     sub    $0x58,%rsp
0x00000000004010eb <+10>:    lea    0x30(%rsp),%rsi
0x00000000004010f0 <+15>:    callq  0x40158a <read_six_numbers>
0x00000000004010f5 <+20>:    lea    0x30(%rsp),%r13
0x00000000004010fa <+25>:    mov    $0x0,%r12d
0x0000000000401100 <+31>:    mov    %r13,%rbp
0x0000000000401103 <+34>:    mov    0x0(%r13),%eax
0x0000000000401107 <+38>:    sub    $0x1,%eax
0x000000000040110a <+41>:    cmp    $0x5,%eax
0x000000000040110d <+44>:    jbe    0x401114 <phase_6+51>
0x000000000040110f <+46>:    callq  0x401554 <explode_bomb>
0x0000000000401114 <+51>:    add    $0x1,%r12d
0x0000000000401118 <+55>:    cmp    $0x6,%r12d
0x000000000040111c <+59>:    jne    0x401125 <phase_6+68>
0x000000000040111e <+61>:    mov    $0x0,%esi
0x0000000000401123 <+66>:    jmp    0x401167 <phase_6+134>
0x0000000000401125 <+68>:    mov    %r12d,%ebx
0x0000000000401128 <+71>:    movslq %ebx,%rax
0x000000000040112b <+74>:    mov    0x30(%rsp,%rax,4),%eax
0x000000000040112f <+78>:    cmp    %eax,0x0(%rbp)
0x0000000000401132 <+81>:    jne    0x401139 <phase_6+88>
0x0000000000401134 <+83>:    callq  0x401554 <explode_bomb>
0x0000000000401139 <+88>:    add    $0x1,%ebx
0x000000000040113c <+91>:    cmp    $0x5,%ebx
0x000000000040113f <+94>:    jle    0x401128 <phase_6+71>
0x0000000000401141 <+96>:    add    $0x4,%r13
0x0000000000401145 <+100>:   jmp    0x401100 <phase_6+31>
0x0000000000401147 <+102>:   mov    0x8(%rdx),%rdx
0x000000000040114b <+106>:   add    $0x1,%eax
0x000000000040114e <+109>:   cmp    %ecx,%eax
0x0000000000401150 <+111>:   jne    0x401147 <phase_6+102>
0x0000000000401152 <+113>:   jmp    0x401159 <phase_6+120>
0x0000000000401154 <+115>:   mov    $0x6042f0,%edx
0x0000000000401159 <+120>:   mov    %rdx,(%rsp,%rsi,2)
0x000000000040115d <+124>:   add    $0x4,%rsi
0x0000000000401161 <+128>:   cmp    $0x18,%rsi
0x0000000000401165 <+132>:   je     0x40117c <phase_6+155>
0x0000000000401167 <+134>:   mov    0x30(%rsp,%rsi,1),%ecx
0x000000000040116b <+138>:   cmp    $0x1,%ecx
0x000000000040116e <+141>:   jle    0x401154 <phase_6+115>
0x0000000000401170 <+143>:   mov    $0x1,%eax
0x0000000000401175 <+148>:   mov    $0x6042f0,%edx
0x000000000040117a <+153>:   jmp    0x401147 <phase_6+102>
0x000000000040117c <+155>:   mov    (%rsp),%rbx
0x0000000000401180 <+159>:   lea    0x8(%rsp),%rax
0x0000000000401185 <+164>:   lea    0x30(%rsp),%rsi
0x000000000040118a <+169>:   mov    %rbx,%rcx
0x000000000040118d <+172>:   mov    (%rax),%rdx
0x0000000000401190 <+175>:   mov    %rdx,0x8(%rcx)
0x0000000000401194 <+179>:   add    $0x8,%rax
0x0000000000401198 <+183>:   cmp    %rsi,%rax
0x000000000040119b <+186>:   je     0x4011a2 <phase_6+193>
0x000000000040119d <+188>:   mov    %rdx,%rcx
0x00000000004011a0 <+191>:   jmp    0x40118d <phase_6+172>
0x00000000004011a2 <+193>:   movq   $0x0,0x8(%rdx)
0x00000000004011aa <+201>:   mov    $0x5,%ebp
0x00000000004011af <+206>:   mov    0x8(%rbx),%rax
0x00000000004011b3 <+210>:   mov    (%rax),%eax
0x00000000004011b5 <+212>:   cmp    %eax,(%rbx)
0x00000000004011b7 <+214>:   jle    0x4011be <phase_6+221>
0x00000000004011b9 <+216>:   callq  0x401554 <explode_bomb>
0x00000000004011be <+221>:   mov    0x8(%rbx),%rbx
0x00000000004011c2 <+225>:   sub    $0x1,%ebp
0x00000000004011c5 <+228>:   jne    0x4011af <phase_6+206>
0x00000000004011c7 <+230>:   add    $0x58,%rsp
0x00000000004011cb <+234>:   pop    %rbx
0x00000000004011cc <+235>:   pop    %rbp
0x00000000004011cd <+236>:   pop    %r12
0x00000000004011cf <+238>:   pop    %r13
0x00000000004011d1 <+240>:   retq

nodes:
(gdb) x/3x ($rbx)
0x6042f0 <node1>:       0x0000037f      0x00000001      0x00604300
(gdb) x/3x *($rbx+8)
0x604300 <node2>:       0x00000038      0x00000002      0x00604310
(gdb) x/3x *(*($rbx+8)+8)
0x604310 <node3>:       0x00000314      0x00000003      0x00604320
(gdb) x/3x *(*(*($rbx+8)+8)+8)
0x604320 <node4>:       0x00000328      0x00000004      0x00604330
(gdb) x/3x *(*(*(*($rbx+8)+8)+8)+8)
0x604330 <node5>:       0x000001e7      0x00000005      0x00604340
(gdb) x/3x *(*(*(*(*($rbx+8)+8)+8)+8)+8)
0x604340 <node6>:       0x00000262      0x00000006      0x00000000

1: 895
2: 56
3: 788
4: 808
5: 487
6: 610
1 4 3 6 5 2 || 2 5 6 3 4 1

secret phase:
   0x0000000000401210 <+0>:     push   %rbx
   0x0000000000401211 <+1>:     callq  0x4015cc <read_line>
   0x0000000000401216 <+6>:     mov    $0xa,%edx
   0x000000000040121b <+11>:    mov    $0x0,%esi
   0x0000000000401220 <+16>:    mov    %rax,%rdi
   0x0000000000401223 <+19>:    callq  0x400be0 <strtol@plt>
   0x0000000000401228 <+24>:    mov    %rax,%rbx
   0x000000000040122b <+27>:    lea    -0x1(%rax),%eax
   0x000000000040122e <+30>:    cmp    $0x3e8,%eax
   0x0000000000401233 <+35>:    jbe    0x40123a <secret_phase+42>
   0x0000000000401235 <+37>:    callq  0x401554 <explode_bomb>
   0x000000000040123a <+42>:    mov    %ebx,%esi
   0x000000000040123c <+44>:    mov    $0x604110,%edi
   0x0000000000401241 <+49>:    callq  0x4011d2 <fun7>
   0x0000000000401246 <+54>:    test   %eax,%eax
   0x0000000000401248 <+56>:    je     0x40124f <secret_phase+63>
   0x000000000040124a <+58>:    callq  0x401554 <explode_bomb>
   0x000000000040124f <+63>:    mov    $0x4024d8,%edi
   0x0000000000401254 <+68>:    callq  0x400b30 <puts@plt>
   0x0000000000401259 <+73>:    callq  0x4016f2 <phase_defused>
   0x000000000040125e <+78>:    pop    %rbx
   0x000000000040125f <+79>:    retq

